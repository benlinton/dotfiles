#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# Disable the install script until it's updated
# ------------------------------------------------------------------------------

echo "Install aborted; this script is out-of-date"
exit

# TODO:
# - Create or use ~/.dotfiles.backups directory for preexisting dotfiles
# - Backup existing symlinks if they're different than installed symlink
# - Check vimfiles submodule before blindly symlinking
# - Provide an option to automate git submodules updates with the install script
# - Prompt users for private gitconfig credentials?

# ------------------------------------------------------------------------------
# Initialize
# ------------------------------------------------------------------------------

# Define files to symlink inside $HOME dir
FILES="
bash_profile
bashrc
gemrc
gitignore
vimrc
vim"

# Set directory of the executed script
SCRIPTS_DIR="$(dirname $0)"

# Set SOURCE_DIR and BACKUP_DIR
cd "$SCRIPTS_DIR/.."
SOURCE_DIR="$(pwd)"

# TODO, provide users with the option to specify an alternate BACKUP_DIR
BACKUP_DIR="$(pwd)/backups"

# ------------------------------------------------------------------------------
# Define Functions
# ------------------------------------------------------------------------------

# Always use printf instead of echo, conveniently handles intending and newline
# Usage: print "Output" [optional_skip_indent_flag]
print() {
	OUTPUT=$1
	LEADER=""
	if [ ! $2 ]
	then
		LEADER="  |--> "
	fi
	printf "  ${LEADER}${OUTPUT}\n"
}

# ------------------------------------------------------------------------------
# Execute Installation
# ------------------------------------------------------------------------------

# For each FILES
for FILE in $(echo "$FILES")
do
	# Set SOURCE and TARGET
	SOURCE="$SOURCE_DIR/$FILE"
	TARGET="$HOME/.$FILE"

	# TODO, validate that the TARGET exists (warn on mispelling or missing file)
	print "Install $(basename $TARGET)" true

	# Backup TARGET
	if [ -L "$TARGET" ] # If TARGET is symlink
	then
		# Skip symlink backups
		print "Skip symlink backup"
		# TODO, if the symlink doesn't point to SOURCE then back up the symlink
	elif [ -e "$TARGET" ] # If TARGET exists
	then
		BACKUP="$BACKUP_DIR/$FILE.bak"
		if [ -e "$BACKUP" ] # If backup already exists
		then
			# Create an incremented backup version
			COUNT=0
			while [ -e "$BACKUP.$COUNT" ]; do let "COUNT += 1"; done
			BACKUP="$BACKUP.$COUNT"
		fi
		mv "$TARGET" "$BACKUP"
		print "Backup: $TARGET -> $BACKUP"
	fi

	# Remove target if it exists
	if [ -L "$TARGET" ] # If TARGET is symlink
	then
		unlink $TARGET
		print "Unlink existing symlink"
		# TODO, skip symlinks that are identical to the created symlink
	elif [ -e $TARGET ] # If TARGET exists
	then
		rm -rf "$TARGET"
		print "Delete: $TARGET"
	fi

	# Create target symlink
	ln -s "$SOURCE" "$TARGET"
	print "Create new symlink: $TARGET -> $SOURCE"

done

